#!/usr/bin/env bash

set -e

repo_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." >/dev/null 2>&1 && pwd )"
script_dir="$repo_dir/bin"
source "$script_dir/bash_utils.sh"
os_env="$(get_os_type)"

node_target="$2"
target_arch="$3"
os_arch=""
if [ "$os_arch" = "" ]; then
  if [ "$os_env" = "mac" ]; then
    os_arch="$(uname -m)"
  else
    os_arch="$(arch)"
  fi
  if [ "$os_arch" = "x86_64" ]; then
    os_arch="x64"
  fi
fi
# Validate OS arch
if [ "$target_arch" != "x64" ] && [ "$target_arch" != "arm64" ]; then
  echo "Error! Unsupported architecture: $target_arch"
  exit 1
fi
nexe_target="$target_arch-$node_target"

help_text="
build_nexe 

This script will build nexe no-mangle releases for use by nexe with Javascript files.

Usage: build_nexe COMMAND NODE_VERSION

Commands:
  build                Compiles nexe build (targets local OS)
  build-check          Checks whether prep has been done, prints OK or FAIL
  help | --help | -h   Prints this menu

"

build_dir="$repo_dir/dist"
nexe_no_mangle_name="$os_env-$nexe_target"
nexe_no_mangle_path="$build_dir/$nexe_no_mangle_name"

function main(){
  cmd="$1"
  case "$cmd" in
    "help"|"--help"|"-h"|"")
      echo "$help_text"
      exit 0
      ;;
    "build-check")
      if [ "$node_target" = "" ]; then
        echo "Please pass node_target as second argument"
        exit 1
      fi
      if [ -f "$nexe_no_mangle_path" ]; then
        echo "OK"
      else
        echo "FAIL"
      fi
      ;;
    "build")
      if [ "$node_target" = "" ]; then
        echo "Please pass node_target as second argument"
        exit 1
      fi
      if [ -f "$nexe_no_mangle_path" ]; then
        echo "Detected existing build! Skipping re-compile."
        echo "  Existing build: $nexe_no_mangle_path"
        exit 0
      else
        echo "No existing build detected. Compiling now."
      fi

      if [ "$os_env" = "linux" ]; then
        echo "Running: source /opt/rh/devtoolset-8/enable"
        source /opt/rh/devtoolset-8/enable

        export CC="$(which gcc)"
        export CXX="$(which g++)"
        echo "$CC --version = $($CC --version)"
        echo "$CXX --version = $($CXX --version)"

        if command -v ccache &> /dev/null; then
          echo "ccache detected!"
          export CC="ccache $CC"
          export CXX="ccache $CXX"
          echo "CC=$CC"
          echo "CXX=$CXX"
        fi
      fi

      echo "Creating build directory ($build_dir) ..."
      mkdir -p "$build_dir"

      case "$os_env" in
        "linux"|"windows")
          cpu_core_count="$(nproc)"
          ;;
        "mac")
          cpu_core_count="$(sysctl -n hw.ncpu)"
          ;;
      esac

      python2_path="$(command -v python2 || true)"
      python3_path="$(command -v python3)"
      echo "python2_path=$python2_path"
      echo "python3_path=$python3_path"
      nexe_part_1_cmd="nexe --build --verbose --no-mange --target=$nexe_target --make=DESTCPU=$target_arch --make=-j$cpu_core_count"
      nexe_part_2_cmd="--configure=--openssl-no-asm --configure=--without-snapshot --configure=--without-inspector --configure=--without-intl --configure=--with-arm-fpu=neon --configure=--with-arm-float-abi=hard --configure=--cross-compiling"
      # if [ "$target_arch" != "$os_arch"] ; then
      #   nexe_part_2_cmd="$nexe_part_2_cmd --configure=--cross-compiling"
      # fi
      nexe_part_3_cmd="-o $nexe_no_mangle_path '$repo_dir/index.js'"

      echo "console.log('TEST NEXE SCRIPT'); console.log(process.version); var os = require('os'); console.log('os.arch() =', os.arch()); console.log('os.userInfo() =', os.userInfo());" > "$repo_dir/index.js"
      echo "Building $nexe_no_mangle_name (python 3)"

      export NEON32_CFLAGS="-march=armv7-a -mfloat-abi=hard -mfpu=neon"
      export NEON64_CFLAGS="-march=armv8-a -mfloat-abi=hard"

      nexe_cmd="$nexe_part_1_cmd --python=$python3_path $nexe_part_2_cmd $nexe_part_3_cmd"
      echo "  $nexe_cmd"
      set +e
      time npx $nexe_cmd || build_failed="true"
      set -e
      if [ "$build_failed" = "true" ]; then
        echo "Trying fallback to python2 ..."
        echo "Building $nexe_no_mangle_name (python 2)"
        nexe_cmd="$nexe_part_1_cmd --python=$python2_path $nexe_part_3_cmd"
        echo "  $nexe_cmd"
        time npx $nexe_cmd
      fi
      echo "Build finished."
      rm "$repo_dir/index.js"
      # Not compressing right now because nexe currently doesn't support downloading
      # compressed prebuilt binaries.
      #echo "Compressing outputted file ..."
      #cd "$build_dir"
      #gzip -1 "./$nexe_no_mangle_name"
      ;;
    *)
      echo "Command is not supported: $cmd"
      exit 1
      ;;
  esac
}

main $@
